<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>最大公约数 on QuwnyBlog</title>
    <link>https://quwny.github.io/tags/%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0/</link>
    <description>Recent content in 最大公约数 on QuwnyBlog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 05 Aug 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://quwny.github.io/tags/%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>最大公约数</title>
      <link>https://quwny.github.io/posts/alg_ds/gcd/</link>
      <pubDate>Fri, 05 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://quwny.github.io/posts/alg_ds/gcd/</guid>
      <description>最大公约数 最大公约数（Greatest Common Divisor），也称最大公因数、最大公因子，指两个或多个整数共有约数中最大的一个。
a, b 的最大公约数记为 (a, b) 。同样的，a, b, c 的最大公约数记为 (a, b, c)。
求最大公约数有多种方法，常见的有质因数分解法、短除法、辗转相除法（欧几里德算法）、更相减损法。
详细介绍可查看百度百科：最大公约数
辗转相除法（欧几里德算法） 欧几里得算法又称辗转相除法，是指用于计算两个非负整数 a, b 的最大公约数。
定理：两个整数的最大公约数 等于 其中较小的那个数和两数相除余数的最大公约数。
计算公式 gcd(a,b) = gcd(b,a mod b)。
代码实现
// 辗转相除法 int gcd(int a, int b) { while (b != 0) { // 余数 int r = a % b; a = b; b = r; } return a; } // 辗转相除法 - 递归写法 int gcd(int a, int b) { return b == 0 ?</description>
    </item>
    
  </channel>
</rss>
